{"version":3,"sources":["script.js"],"names":["window","onload","steps","steps_to_finish","date","current_level","current_size","current_star_stats","current_column_size","game_toggle","levels","document","querySelectorAll","levels_container","getElementById","game","game_container","button_goback","stats_moves","stats_time","level_modal","btnModalWindowClose","modalWindow","modalStars","stars","card_clicked","is_goback_blocked","cards","updateStarStats","s","length","star","openModalWindow","console","log","classList","add","remove","closeModalWindow","button_share","_asyncToGenerator","_regeneratorRuntime","mark","_callee","shareData","wrap","_context","prev","next","title","text","concat","innerText","navigator","share","t0","alert","clipboard","writeText","stop","timer","i","addEventListener","event","currentTarget","getAttribute","generate_game","row_size","diff_in_second","setInterval","img_names","seconds","minutes","img_for_game","random_name","Math","floor","splice","indexOf","a","random_position","random","img_name","card","front","setAttribute","createElement","desc","back","appendChild","img","base_src","wrapper","configureGrid","_loop","contains","forEach","element","push","card2","val1","card1","val2","setTimeout","saveStarStatsData","star_stats","cleanLocalStorage","localStorage","getItem","JSON","parse","the_best_steps","calculate_star","data_level_arr","is_need_update","setItem","stringify","clearInterval","is_active","data_level","toggle_game","clear_game","level","Date","getTime","innerHTML","max_width","base_viewport_width","viewport_padding_size","clientWidth","viewport_width","card_width","max_card_height","card_height","max_card_width","maxWidth","new_max_width","style","compare_card","height","level_index","index_first_star","stats","includes"],"mappings":"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","file":"main.min.js","sourcesContent":["window.onload = function () {\n\tlet game_toggle = false;\n\tlet levels = document.querySelectorAll(\"#level\");\n\tlet levels_container = document.getElementById(\"levels-container\");\n\tlet game = document.getElementById(\"game\");\n\tlet game_container = document.getElementById(\"game-container\");\n\tlet button_goback = document.getElementById(\"button-goback\");\n\tlet stats_moves = document.querySelectorAll(\"#stats-moves\");\n\tlet stats_time = document.querySelectorAll(\"#stats-time\");\n\tlet level_modal = document.getElementById(\"curr-level\");\n\tlet button_share = document.getElementById(\"share-btn\");\n\n\tlet btnModalWindowClose = document.getElementById(\"modal-close\");\n\tlet modalWindow = document.querySelector(\".modal-overlay\");\n\tlet modalStars = document.querySelectorAll(\".modal__star\");\n\n\tlet stars = document.querySelectorAll(\".level .star-icon\");\n\n\tlet card_clicked = [];\n\tlet steps;\n\tlet steps_to_finish;\n\tlet date;\n\tlet current_level;\n\tlet current_size;\n\tlet current_star_stats;\n\tlet current_column_size;\n\n\tlet is_goback_blocked = false;\n\n\tlet cards = [];\n\n\tupdateStarStats();\n\n\t//modal window\n\tfunction openModalWindow() {\n\t\tconsole.log(modalStars);\n\t\tfor (let s = 0; s < modalStars.length; s++) {\n\t\t\tlet star = modalStars[s];\n\t\t\tconsole.log(star);\n\t\t\tif (current_star_stats > s) star.classList.add(\"yellow\");\n\t\t\telse star.classList.remove(\"yellow\");\n\t\t}\n\t\tmodalWindow.classList.add(\"open-modal\");\n\t}\n\tfunction closeModalWindow() {\n\t\tmodalWindow.classList.remove(\"open-modal\");\n\t\tis_goback_blocked = false;\n\t\tbutton_goback.classList.remove(\"blocked\");\n\t}\n\tbtnModalWindowClose.addEventListener(\"click\", closeModalWindow);\n\n\tbutton_share.addEventListener(\"click\", async () => {\n\t\tlet shareData = {\n\t\t\ttitle: \"Can you beat me?\",\n\t\t\ttext: `Can you beat me? I did it only using ${stats_moves[1].innerText} moves and my time is ${stats_time[1].innerText}\\n`,\n\t\t\turl: \"https://memory-improving-card-game.netlify.app/\",\n\t\t};\n\t\ttry {\n\t\t\tawait navigator.share(shareData);\n\t\t\tconsole.log(\"MDN shared successfully\");\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\talert(\"Coppied to Clipboard\");\n\t\t\tnavigator.clipboard.writeText(\n\t\t\t\t`Can you beat me? I did it only using ${stats_moves[1].innerText} moves and my time is ${stats_time[1].innerText}\\nhttps://memory-improving-card-game.netlify.app/`\n\t\t\t);\n\t\t}\n\t});\n\n\t// level click event\n\tfor (let i = 0; i < levels.length; i++) {\n\t\tlet level = levels[i];\n\t\tlevel.addEventListener(\"click\", (event) => {\n\t\t\tcurrent_level = event.currentTarget.getAttribute(\"data-level\");\n\t\t\tgenerate_game(current_level);\n\t\t\tlet data_level = event.currentTarget.getAttribute(\"data-level\");\n\t\t\tlevel_modal.innerText = data_level[0] + \" ✖ \" + data_level[1];\n\t\t\ttoggle_game();\n\t\t});\n\t}\n\n\t// go back event\n\tbutton_goback.addEventListener(\"click\", () => {\n\t\tif (is_goback_blocked) return;\n\t\ttoggle_game();\n\t\tclear_game();\n\t});\n\n\tlet timer;\n\n\tfunction toggle_game() {\n\t\tsteps = 0;\n\t\tif (!game_toggle) {\n\t\t\tgame.classList.remove(\"hide-block\");\n\t\t\tlevels_container.classList.add(\"hide-block\");\n\t\t\tgame_toggle = true;\n\t\t\tdate = new Date();\n\t\t\ttimer = setInterval(() => {\n\t\t\t\tvar diff_in_second = Math.floor(\n\t\t\t\t\t(new Date().getTime() - date.getTime()) / 1000\n\t\t\t\t);\n\t\t\t\tvar seconds = diff_in_second % 60;\n\t\t\t\tvar minutes = (diff_in_second - seconds) / 60;\n\t\t\t\tif (seconds < 10) seconds = \"0\" + seconds;\n\t\t\t\tstats_time.forEach((element) => {\n\t\t\t\t\telement.innerText = minutes + \":\" + seconds;\n\t\t\t\t});\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tgame.classList.add(\"hide-block\");\n\t\t\tupdateStarStats();\n\t\t\tlevels_container.classList.remove(\"hide-block\");\n\t\t\tgame_toggle = false;\n\t\t\tclear_game();\n\t\t}\n\t}\n\n\tfunction generate_game(levels) {\n\t\tcurrent_column_size = levels % 10;\n\t\tlet row_size = (levels - current_column_size) / 10;\n\t\tgame_container.setAttribute(\"data-columns\", current_column_size);\n\t\tcurrent_size = row_size * current_column_size;\n\t\tsteps_to_finish = current_size;\n\t\t/* create card template *\n\t\t\t<div class=\"card\" id=\"card\" data-open=\"false\" data-value=\"36\">\n\t\t\t\t<div class=\"card__front main-font_medium\">\n\t\t\t\t\t<p>36</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"card__back\">\n\t\t\t\t\t<p>photo 36</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t*/\n\n\t\t// replace it with sprite in future !!!\n\t\tlet img_names = [\n\t\t\t\"bear\",\n\t\t\t\"bison\",\n\t\t\t\"buffalo\",\n\t\t\t\"cow\",\n\t\t\t\"crocodile\",\n\t\t\t\"deer\",\n\t\t\t\"elephant\",\n\t\t\t\"flamingo\",\n\t\t\t\"fox\",\n\t\t\t\"giraffe\",\n\t\t\t\"hedgehog\",\n\t\t\t\"hippopotamus\",\n\t\t\t\"horse\",\n\t\t\t\"pig\",\n\t\t\t\"rabbit\",\n\t\t\t\"rhinoceros\",\n\t\t\t\"tiger\",\n\t\t\t\"zebra\",\n\t\t];\n\t\tlet base_src = \"/img/cards/animals/128/\";\n\t\tlet ext = \".png\";\n\t\tlet img_for_game = [];\n\n\t\tfor (let i = 0; i < current_size / 2; i++) {\n\t\t\tlet random_name = img_names[Math.floor(Math.random() * img_names.length)];\n\t\t\timg_names.splice(img_names.indexOf(random_name), 1);\n\t\t\tfor (let a = 0; a < 2; a++) {\n\t\t\t\tlet random_position = Math.floor(Math.random() * img_for_game.length);\n\t\t\t\timg_for_game.splice(random_position, 0, random_name);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < img_for_game.length; i++) {\n\t\t\tlet img_name = img_for_game[i];\n\t\t\tlet card = document.createElement(\"div\");\n\t\t\tcard.classList.add(\"card\");\n\t\t\tcard.id = \"card\";\n\t\t\tcard.setAttribute(\"data-open\", \"false\");\n\t\t\tcard.setAttribute(\"data-value\", img_name);\n\n\t\t\tlet front = document.createElement(\"div\");\n\t\t\tfront.classList.add(\"card__front\");\n\t\t\tlet desc = document.createElement(\"p\");\n\t\t\tdesc.classList.add(\"main-font_medium\");\n\t\t\tdesc.innerText = i + 1;\n\t\t\tfront.appendChild(desc);\n\n\t\t\tlet back = document.createElement(\"div\");\n\t\t\tback.classList.add(\"card__back\");\n\t\t\tlet img = document.createElement(\"img\");\n\t\t\timg.src = base_src + img_name + ext;\n\t\t\timg.setAttribute(\"alt\", img_name + \" icon\");\n\t\t\tback.appendChild(img);\n\n\t\t\tcard.appendChild(front);\n\t\t\tcard.appendChild(back);\n\n\t\t\t// add wrapper\n\t\t\tlet wrapper = document.createElement(\"div\");\n\t\t\tcards.push(wrapper);\n\t\t\twrapper.classList.add(\"game__wrapper\");\n\t\t\twrapper.appendChild(card);\n\t\t\tgame_container.appendChild(wrapper);\n\t\t}\n\n\t\tconfigureGrid();\n\t\tadd_event_to_card();\n\t}\n\n\tfunction clear_game() {\n\t\tcards = [];\n\t\tgame_container.innerHTML = \"\";\n\t\tstats_moves.forEach((element) => {\n\t\t\telement.innerText = \"0\";\n\t\t});\n\t\tclearInterval(timer);\n\t\tstats_time.forEach((element) => {\n\t\t\telement.innerText = \"0:0\";\n\t\t});\n\t}\n\n\tfunction add_event_to_card() {\n\t\tlet cards = document.querySelectorAll(\"#card\");\n\n\t\t// card click event\n\t\tfor (let i = 0; i < cards.length; i++) {\n\t\t\tlet card = cards[i];\n\t\t\tcard.addEventListener(\"click\", () => {\n\t\t\t\tlet is_active = card.classList.contains(\"active\");\n\t\t\t\tif (is_active) return;\n\n\t\t\t\t// add class active\n\t\t\t\tcard.classList.add(\"active\");\n\t\t\t\tsteps += 1;\n\t\t\t\tstats_moves.forEach((element) => {\n\t\t\t\t\telement.innerText = steps;\n\t\t\t\t});\n\n\t\t\t\t// save card\n\t\t\t\tcard_clicked.push(card);\n\n\t\t\t\t// if two card -> compare\n\t\t\t\tif (card_clicked.length == 2) {\n\t\t\t\t\tcompare_card();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction configureGrid() {\n\t\t// viewport width without vertical scrollbar\n\t\tlet base_viewport_width = document.documentElement.clientWidth;\n\t\tconst max_width = 1300;\n\t\tbase_viewport_width =\n\t\t\tbase_viewport_width > max_width ? 1300 : base_viewport_width;\n\t\tlet viewport_padding_size = base_viewport_width > 768 ? 40 : 10;\n\t\tlet viewport_width = base_viewport_width - viewport_padding_size;\n\n\t\tlet padding = viewport_width > 768 ? 10 : 4;\n\n\t\tconst max_card_width = 210;\n\t\tconst max_card_height = 130;\n\t\tlet card_width = viewport_width / current_column_size - padding;\n\t\tcard_width = card_width > max_card_width ? max_card_width : card_width;\n\t\tlet card_height = (max_card_height / max_card_width) * card_width;\n\n\t\tlet new_max_width = card_width * current_column_size + viewport_padding_size;\n\t\tgame_container.style.maxWidth = new_max_width + \"px\";\n\n\t\tfor (let i = 0; i < cards.length; i++) {\n\t\t\tlet card = cards[i];\n\t\t\tcard.style.width = card_width + \"px\";\n\t\t\tcard.style.height = card_height + \"px\";\n\t\t}\n\t}\n\n\taddEventListener(\"resize\", configureGrid);\n\n\tfunction compare_card() {\n\t\tlet card1 = card_clicked[0];\n\t\tlet card2 = card_clicked[1];\n\t\tlet val1 = card1.getAttribute(\"data-value\");\n\t\tlet val2 = card2.getAttribute(\"data-value\");\n\t\t// if equal -> set data-open=\"true\"\n\t\tif (val1 == val2) {\n\t\t\tcard1.setAttribute(\"data-open\", \"true\");\n\t\t\tcard2.setAttribute(\"data-open\", \"true\");\n\t\t\tsteps_to_finish -= 2;\n\t\t\tif (steps_to_finish == 0) {\n\t\t\t\twin();\n\t\t\t}\n\t\t} else {\n\t\t\tsetTimeout(() => {\n\t\t\t\tcard1.classList.add(\"animated\");\n\t\t\t\tcard1.classList.remove(\"active\");\n\t\t\t\tcard2.classList.add(\"animated\");\n\t\t\t\tcard2.classList.remove(\"active\");\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tcard1.classList.remove(\"animated\");\n\t\t\t\t\tcard2.classList.remove(\"animated\");\n\t\t\t\t}, 1600);\n\t\t\t}, 1000);\n\t\t}\n\t\tcard_clicked = [];\n\t}\n\n\tfunction win() {\n\t\tis_goback_blocked = true;\n\t\tbutton_goback.classList.add(\"blocked\");\n\t\tsaveStarStatsData();\n\t\tclearInterval(timer);\n\t\tsetTimeout(openModalWindow, 1600);\n\t}\n\n\tfunction calculate_star() {\n\t\tlet the_best_steps = current_size * 2;\n\t\tif (steps <= the_best_steps) current_star_stats = 3;\n\t\telse if (steps <= the_best_steps + current_size / 2) current_star_stats = 2;\n\t\telse current_star_stats = 1;\n\t}\n\n\tfunction saveStarStatsData() {\n\t\tlet star_stats = JSON.parse(window.localStorage.getItem(\"star-stats\"));\n\t\tif (star_stats === null) star_stats = {};\n\t\tcalculate_star();\n\t\tstar_stats[current_level] = current_star_stats;\n\t\twindow.localStorage.setItem(\"star-stats\", JSON.stringify(star_stats));\n\t}\n\n\tfunction cleanLocalStorage() {\n\t\tlet star_stats = JSON.parse(window.localStorage.getItem(\"star-stats\"));\n\n\t\tlet data_level_arr = [];\n\t\tlet is_need_update = false;\n\n\t\t// build data_level_arr\n\t\tfor (let i = 0; i < levels.length; i++) {\n\t\t\tlet level = levels[i];\n\t\t\tlet data_level = level.getAttribute(\"data-level\");\n\t\t\tif (data_level != null) data_level_arr.push(data_level);\n\t\t}\n\n\t\t// review local storage\n\t\tfor (let level in star_stats) {\n\t\t\tif (!data_level_arr.includes(level)) {\n\t\t\t\tdelete star_stats[level];\n\t\t\t\tis_need_update = true;\n\t\t\t}\n\t\t}\n\n\t\t// update storage if levels is not exist\n\t\tif (is_need_update) {\n\t\t\twindow.localStorage.setItem(\"star-stats\", JSON.stringify(star_stats));\n\t\t}\n\t}\n\n\tfunction updateStarStats() {\n\t\tlet star_stats = JSON.parse(window.localStorage.getItem(\"star-stats\"));\n\n\t\tif (star_stats === null) return;\n\n\t\tfor (let level_index = 0; level_index < levels.length; level_index++) {\n\t\t\tlet data_level = levels[level_index].getAttribute(\"data-level\");\n\t\t\tif (data_level == null) continue;\n\t\t\t// set level stars\n\t\t\tlet stats = star_stats[data_level];\n\t\t\tlet index_first_star = level_index * 3;\n\n\t\t\tif (stats > 0) {\n\t\t\t\t// set first\n\t\t\t\tstars[index_first_star].classList.add(\"yellow\");\n\n\t\t\t\t// set second\n\t\t\t\tif (stats > 1) stars[index_first_star + 1].classList.add(\"yellow\");\n\t\t\t\telse stars[index_first_star + 1].classList.remove(\"yellow\");\n\n\t\t\t\t// set third\n\t\t\t\tif (stats == 3) stars[index_first_star + 2].classList.add(\"yellow\");\n\t\t\t\telse stars[index_first_star + 2].classList.remove(\"yellow\");\n\t\t\t}\n\t\t}\n\t}\n\n\tcleanLocalStorage();\n};\n"]}