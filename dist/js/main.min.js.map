{"version":3,"sources":["script.js"],"names":["window","onload","steps","steps_to_finish","date","current_level","current_size","current_star_stats","current_column_size","game_toggle","levels","document","querySelectorAll","levels_container","getElementById","game","game_container","button_goback","stats_moves","stats_time","level_modal","btnModalWindowClose","modalWindow","modalStars","stars","card_clicked","is_goback_blocked","cards","updateStarStats","s","length","star","openModalWindow","console","log","classList","add","remove","closeModalWindow","title","text","concat","innerText","url","button_share","addEventListener","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","navigator","share","shareData","t0","alert","clipboard","writeText","stop","timer","i","event","currentTarget","getAttribute","generate_game","row_size","diff_in_second","setInterval","img_names","seconds","minutes","img_for_game","random_name","Math","floor","splice","indexOf","a","random_position","random","img_name","card","front","setAttribute","createElement","desc","back","appendChild","img","base_src","wrapper","configureGrid","_loop","contains","forEach","element","push","card1","card2","val2","val1","saveStarStatsData","star_stats","JSON","parse","localStorage","getItem","cleanLocalStorage","the_best_steps","data_level_arr","is_need_update","setItem","stringify","clearInterval","calculate_star","setTimeout","is_active","data_level","toggle_game","clear_game","level","Date","getTime","innerHTML","max_width","base_viewport_width","viewport_padding_size","clientWidth","viewport_width","card_width","max_card_width","card_height","maxWidth","height","style","new_max_width","width","compare_card","index_first_star","stats","level_index","includes"],"mappings":"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","file":"main.min.js","sourcesContent":["window.onload = function () {\n\tlet game_toggle = false;\n\tlet levels = document.querySelectorAll(\"#level\");\n\tlet levels_container = document.getElementById(\"levels-container\");\n\tlet game = document.getElementById(\"game\");\n\tlet game_container = document.getElementById(\"game-container\");\n\tlet button_goback = document.getElementById(\"button-goback\");\n\tlet stats_moves = document.querySelectorAll(\"#stats-moves\");\n\tlet stats_time = document.querySelectorAll(\"#stats-time\");\n\tlet level_modal = document.getElementById(\"curr-level\");\n\tlet button_share = document.getElementById(\"share-btn\");\n\n\tlet btnModalWindowClose = document.getElementById(\"modal-close\");\n\tlet modalWindow = document.querySelector(\".modal-overlay\");\n\tlet modalStars = document.querySelectorAll(\".modal__star\");\n\n\tlet stars = document.querySelectorAll(\".level .star-icon\");\n\n\tlet card_clicked = [];\n\tlet steps;\n\tlet steps_to_finish;\n\tlet date;\n\tlet current_level;\n\tlet current_size\n\tlet current_star_stats;\n\tlet current_column_size;\n\n\tlet is_goback_blocked = false;\n\n\tlet cards = [];\n\n\tupdateStarStats();\n\n\t//modal window\n\tfunction openModalWindow() {\n\t\tconsole.log(modalStars);\n\t\tfor (let s = 0; s < modalStars.length; s++) {\n\t\t\tlet star = modalStars[s];\n\t\t\tconsole.log(star);\n\t\t\tif (current_star_stats > s) star.classList.add(\"yellow\");\n\t\t\telse star.classList.remove(\"yellow\");\n\t\t}\n\t\tmodalWindow.classList.add(\"open-modal\");\n\t}\n\tfunction closeModalWindow() {\n\t\tmodalWindow.classList.remove(\"open-modal\");\n\t\tis_goback_blocked = false;\n\t\tbutton_goback.classList.remove(\"blocked\");\n\t}\n\tbtnModalWindowClose.addEventListener(\"click\", closeModalWindow);\n\n\tconst shareData = {\n\t\ttitle: \"Can you beat me?\",\n\t\ttext: `Can you beat me? I did it only using ${stats_moves[1].innerText} moves and my time is ${stats_time[1].innerText}\\n`,\n\t\turl: \"https://memory-improving-card-game.netlify.app/\",\n\t};\n\t\n\tbutton_share.addEventListener(\"click\", async () => {\n\t\ttry {\n\t\t\tawait navigator.share(shareData);\n\t\t\tconsole.log(\"MDN shared successfully\");\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\talert(\"Coppied to Clipboard\");\n\t\t\tnavigator.clipboard.writeText(`Can you beat me? I did it only using ${stats_moves[1].innerText} moves and my time is ${stats_time[1].innerText}\\nhttps://memory-improving-card-game.netlify.app/`);\n\t\t}\n\t});\n\n\t// level click event\n\tfor (let i = 0; i < levels.length; i++) {\n\t\tlet level = levels[i];\n\t\tlevel.addEventListener(\"click\", (event) => {\n\t\t\tcurrent_level = event.currentTarget.getAttribute(\"data-level\");\n\t\t\tgenerate_game(current_level);\n\t\t\tlet data_level = event.currentTarget.getAttribute(\"data-level\");\n\t\t\tlevel_modal.innerText = data_level[0] + \" ✖ \" + data_level[1];\n\t\t\ttoggle_game();\n\t\t});\n\t}\n\n\t// go back event\n\tbutton_goback.addEventListener(\"click\", () => {\n\t\tif (is_goback_blocked) return;\n\t\ttoggle_game();\n\t\tclear_game();\n\t});\n\n\tlet timer;\n\n\tfunction toggle_game() {\n\t\tsteps = 0;\n\t\tif (!game_toggle) {\n\t\t\tgame.classList.remove(\"hide-block\");\n\t\t\tlevels_container.classList.add(\"hide-block\");\n\t\t\tgame_toggle = true;\n\t\t\tdate = new Date();\n\t\t\ttimer = setInterval(() => {\n\t\t\t\tvar diff_in_second = Math.floor(\n\t\t\t\t\t(new Date().getTime() - date.getTime()) / 1000\n\t\t\t\t);\n\t\t\t\tvar seconds = diff_in_second % 60;\n\t\t\t\tvar minutes = (diff_in_second - seconds) / 60;\n\t\t\t\tif (seconds < 10) seconds = \"0\" + seconds;\n\t\t\t\tstats_time.forEach((element) => {\n\t\t\t\t\telement.innerText = minutes + \":\" + seconds;\n\t\t\t\t});\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tgame.classList.add(\"hide-block\");\n\t\t\tupdateStarStats();\n\t\t\tlevels_container.classList.remove(\"hide-block\");\n\t\t\tgame_toggle = false;\n\t\t\tclear_game();\n\t\t}\n\t}\n\n\tfunction generate_game(levels) {\n\t\tcurrent_column_size = levels % 10;\n\t\tlet row_size = (levels - current_column_size) / 10;\n\t\tgame_container.setAttribute(\"data-columns\", current_column_size);\n\t\tcurrent_size = row_size * current_column_size;\n\t\tsteps_to_finish = current_size;\n\t\t/* create card template *\n\t\t\t<div class=\"card\" id=\"card\" data-open=\"false\" data-value=\"36\">\n\t\t\t\t<div class=\"card__front main-font_medium\">\n\t\t\t\t\t<p>36</p>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"card__back\">\n\t\t\t\t\t<p>photo 36</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t*/\n\n\t\t// replace it with sprite in future !!!\n\t\tlet img_names = [\n\t\t\t\"bear\",\n\t\t\t\"bison\",\n\t\t\t\"buffalo\",\n\t\t\t\"cow\",\n\t\t\t\"crocodile\",\n\t\t\t\"deer\",\n\t\t\t\"elephant\",\n\t\t\t\"flamingo\",\n\t\t\t\"fox\",\n\t\t\t\"giraffe\",\n\t\t\t\"hedgehog\",\n\t\t\t\"hippopotamus\",\n\t\t\t\"horse\",\n\t\t\t\"pig\",\n\t\t\t\"rabbit\",\n\t\t\t\"rhinoceros\",\n\t\t\t\"tiger\",\n\t\t\t\"zebra\",\n\t\t];\n\t\tlet base_src = \"/img/cards/animals/128/\";\n\t\tlet ext = \".png\";\n\t\tlet img_for_game = [];\n\n\t\tfor (let i = 0; i < current_size / 2; i++) {\n\t\t\tlet random_name = img_names[Math.floor(Math.random() * img_names.length)];\n\t\t\timg_names.splice(img_names.indexOf(random_name), 1);\n\t\t\tfor (let a = 0; a < 2; a++) {\n\t\t\t\tlet random_position = Math.floor(Math.random() * img_for_game.length);\n\t\t\t\timg_for_game.splice(random_position, 0, random_name);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < img_for_game.length; i++) {\n\t\t\tlet img_name = img_for_game[i];\n\t\t\tlet card = document.createElement(\"div\");\n\t\t\tcard.classList.add(\"card\");\n\t\t\tcard.id = \"card\";\n\t\t\tcard.setAttribute(\"data-open\", \"false\");\n\t\t\tcard.setAttribute(\"data-value\", img_name);\n\n\t\t\tlet front = document.createElement(\"div\");\n\t\t\tfront.classList.add(\"card__front\");\n\t\t\tlet desc = document.createElement(\"p\");\n\t\t\tdesc.classList.add(\"main-font_medium\");\n\t\t\tdesc.innerText = i + 1;\n\t\t\tfront.appendChild(desc);\n\n\t\t\tlet back = document.createElement(\"div\");\n\t\t\tback.classList.add(\"card__back\");\n\t\t\tlet img = document.createElement(\"img\");\n\t\t\timg.src = base_src + img_name + ext;\n\t\t\timg.setAttribute(\"alt\", img_name + \" icon\");\n\t\t\tback.appendChild(img);\n\n\t\t\tcard.appendChild(front);\n\t\t\tcard.appendChild(back);\n\n\t\t\t// add wrapper\n\t\t\tlet wrapper = document.createElement(\"div\");\n\t\t\tcards.push(wrapper);\n\t\t\twrapper.classList.add(\"game__wrapper\");\n\t\t\twrapper.appendChild(card);\n\t\t\tgame_container.appendChild(wrapper);\n\t\t}\n\n\t\tconfigureGrid();\n\t\tadd_event_to_card();\n\t}\n\n\tfunction clear_game() {\n\t\tcards = [];\n\t\tgame_container.innerHTML = \"\";\n\t\tstats_moves.forEach((element) => {\n\t\t\telement.innerText = \"0\";\n\t\t});\n\t\tclearInterval(timer);\n\t\tstats_time.forEach((element) => {\n\t\t\telement.innerText = \"0:0\";\n\t\t});\n\t}\n\n\tfunction add_event_to_card() {\n\t\tlet cards = document.querySelectorAll(\"#card\");\n\n\t\t// card click event\n\t\tfor (let i = 0; i < cards.length; i++) {\n\t\t\tlet card = cards[i];\n\t\t\tcard.addEventListener(\"click\", () => {\n\t\t\t\tlet is_active = card.classList.contains(\"active\");\n\t\t\t\tif (is_active) return;\n\n\t\t\t\t// add class active\n\t\t\t\tcard.classList.add(\"active\");\n\t\t\t\tsteps += 1;\n\t\t\t\tstats_moves.forEach((element) => {\n\t\t\t\t\telement.innerText = steps;\n\t\t\t\t});\n\n\t\t\t\t// save card\n\t\t\t\tcard_clicked.push(card);\n\n\t\t\t\t// if two card -> compare\n\t\t\t\tif (card_clicked.length == 2) {\n\t\t\t\t\tcompare_card();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction configureGrid() {\n\t\t// viewport width without vertical scrollbar\n\t\tlet base_viewport_width = document.documentElement.clientWidth;\n\t\tconst max_width = 1300;\n\t\tbase_viewport_width = (base_viewport_width > max_width) ? 1300 : base_viewport_width;\n\t\tlet viewport_padding_size = (base_viewport_width > 768) ? 40 : 10;\n\t\tlet viewport_width = base_viewport_width - viewport_padding_size;\n\n\t\tlet padding = (viewport_width > 768) ? 10 : 4; \n\n\t\tconst max_card_width = 210;\n\t\tconst max_card_height = 130;\n\t\tlet card_width = (viewport_width / current_column_size) - padding;\n\t\tcard_width = (card_width > max_card_width) ? max_card_width : card_width;\n\t\tlet card_height = max_card_height/max_card_width * card_width;\n\n\t\tlet new_max_width = card_width * current_column_size + viewport_padding_size;\n\t\tgame_container.style.maxWidth = new_max_width + \"px\";\n\n\t\tfor (let i = 0; i < cards.length; i++) {\n\t\t\tlet card = cards[i];\n\t\t\tcard.style.width = card_width + \"px\";\n\t\t\tcard.style.height = card_height + \"px\";\n\t\t}\n\t}\n\n\taddEventListener(\"resize\", configureGrid);\n\n\tfunction compare_card() {\n\t\tlet card1 = card_clicked[0];\n\t\tlet card2 = card_clicked[1];\n\t\tlet val1 = card1.getAttribute(\"data-value\");\n\t\tlet val2 = card2.getAttribute(\"data-value\");\n\t\t// if equal -> set data-open=\"true\"\n\t\tif (val1 == val2) {\n\t\t\tcard1.setAttribute(\"data-open\", \"true\");\n\t\t\tcard2.setAttribute(\"data-open\", \"true\");\n\t\t\tsteps_to_finish -= 2;\n\t\t\tif (steps_to_finish == 0) {\n\t\t\t\twin();\n\t\t\t}\n\t\t} else {\n\t\t\tsetTimeout(() => {\n\t\t\t\tcard1.classList.add(\"animated\");\n\t\t\t\tcard1.classList.remove(\"active\");\n\t\t\t\tcard2.classList.add(\"animated\");\n\t\t\t\tcard2.classList.remove(\"active\");\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tcard1.classList.remove(\"animated\");\n\t\t\t\t\tcard2.classList.remove(\"animated\");\n\t\t\t\t}, 1600);\n\t\t\t}, 1000);\n\t\t}\n\t\tcard_clicked = [];\n\t}\n\n\tfunction win() {\n\t\tis_goback_blocked = true;\n\t\tbutton_goback.classList.add(\"blocked\");\n\t\tsaveStarStatsData();\n\t\tclearInterval(timer);\n\t\tsetTimeout(openModalWindow, 1600);\n\t}\n\n\tfunction calculate_star() {\n\t\tlet the_best_steps = current_size * 2;\n\t\tif (steps <= the_best_steps) current_star_stats = 3;\n\t\telse if (steps <= the_best_steps + current_size / 2) current_star_stats = 2;\n\t\telse current_star_stats = 1;\n\t}\n\n\tfunction saveStarStatsData() {\n\t\tlet star_stats = JSON.parse(window.localStorage.getItem(\"star-stats\"));\n\t\tif (star_stats === null) star_stats = {};\n\t\tcalculate_star();\n\t\tstar_stats[current_level] = current_star_stats;\n\t\twindow.localStorage.setItem(\"star-stats\", JSON.stringify(star_stats));\n\t}\n\t\n\tfunction cleanLocalStorage() {\n\t\tlet star_stats = JSON.parse(window.localStorage.getItem(\"star-stats\"));\n\n\t\tlet data_level_arr = [];\n\t\tlet is_need_update = false;\n\n\t\t// build data_level_arr\n\t\tfor(let i = 0; i < levels.length; i++) {\n\t\t\tlet level = levels[i];\n\t\t\tlet data_level = level.getAttribute(\"data-level\");\n\t\t\tif (data_level != null) data_level_arr.push(data_level);\n\t\t}\n\n\t\t// review local storage\n\t\tfor (let level in star_stats) {\n\t\t\tif(!data_level_arr.includes(level)) {\n\t\t\t\tdelete star_stats[level];\n\t\t\t\tis_need_update = true;\n\t\t\t}\n\t\t}\n\n\t\t// update storage if levels is not exist\n\t\tif (is_need_update) {\n\t\t\twindow.localStorage.setItem(\"star-stats\", JSON.stringify(star_stats));\n\t\t}\n\t}\n\n\tfunction updateStarStats() {\n\t\tlet star_stats = JSON.parse(window.localStorage.getItem(\"star-stats\"));\n\n\t\tif (star_stats === null) return;\n\n\t\tfor (let level_index = 0; level_index < levels.length; level_index++) {\n\t\t\tlet data_level = levels[level_index].getAttribute(\"data-level\");\n\t\t\tif (data_level == null) continue;\n\t\t\t// set level stars\n\t\t\tlet stats = star_stats[data_level];\n\t\t\tlet index_first_star = level_index * 3;\n\n\t\t\tif (stats > 0) {\n\t\t\t\t// set first\n\t\t\t\tstars[index_first_star].classList.add(\"yellow\");\n\n\t\t\t\t// set second\n\t\t\t\tif (stats > 1) stars[index_first_star + 1].classList.add(\"yellow\");\n\t\t\t\telse stars[index_first_star + 1].classList.remove(\"yellow\");\n\n\t\t\t\t// set third\n\t\t\t\tif (stats == 3) stars[index_first_star + 2].classList.add(\"yellow\");\n\t\t\t\telse stars[index_first_star + 2].classList.remove(\"yellow\");\n\t\t\t}\n\t\t}\n\t}\n\n\tcleanLocalStorage();\n};\n"]}